#!/bin/bash

set -e

JOURNAL_DIR="$HOME/journalot"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

success_msg() {
    echo -e "${GREEN}$1${NC}"
}

warn_msg() {
    echo -e "${YELLOW}$1${NC}"
}

# Check dependencies
check_dependencies() {
    if ! command -v git &> /dev/null; then
        error_exit "git is not installed. Please install git first."
    fi
}

# Determine editor
get_editor() {
    if [ -n "$EDITOR" ]; then
        echo "$EDITOR"
    elif command -v code &> /dev/null; then
        echo "code"
    elif command -v vim &> /dev/null; then
        echo "vim"
    elif command -v nano &> /dev/null; then
        echo "nano"
    else
        error_exit "No suitable editor found. Please set EDITOR environment variable or install code/vim/nano."
    fi
}

# Initialize git repo if needed
init_repo() {
    if [ ! -d "$JOURNAL_DIR/.git" ]; then
        warn_msg "Git repository not initialized in $JOURNAL_DIR"
        echo -n "Would you like to initialize it now? (y/n): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            git init
            echo "*.swp" > .gitignore
            echo ".DS_Store" >> .gitignore
            git add .gitignore
            git commit -m "Initial commit"
            success_msg "Git repository initialized!"
            warn_msg "Don't forget to add a remote: git remote add origin <your-repo-url>"
        else
            warn_msg "Continuing without git version control..."
            return 1
        fi
    fi
    return 0
}

# Show help
show_help() {
    cat << EOF
journalot - Minimal journaling CLI for developers

USAGE:
    journal [OPTIONS]

OPTIONS:
    -h, --help              Show this help message
    -l, --list              List all journal entries
    -y, --yesterday         Open yesterday's entry
    -d, --date DATE         Open entry for specific date (YYYY-MM-DD)

EXAMPLES:
    journal                 # Open today's journal
    journal --yesterday     # Open yesterday's journal
    journal --date 2025-01-15
    journal --list          # List all entries

CONFIGURATION:
    Journal directory: $JOURNAL_DIR
    Editor: \$EDITOR (fallback: code > vim > nano)
EOF
}

# List all entries
list_entries() {
    if [ ! -d "$JOURNAL_DIR" ]; then
        error_exit "No journal directory found at $JOURNAL_DIR"
    fi

    echo "Journal entries:"
    find "$JOURNAL_DIR" -name "*.md" -type f | sort -r | while read -r file; do
        basename "$file"
    done
}

# Parse arguments
ENTRY_DATE=$(date '+%Y-%m-%d')

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -l|--list)
            list_entries
            exit 0
            ;;
        -y|--yesterday)
            ENTRY_DATE=$(date -v-1d '+%Y-%m-%d' 2>/dev/null || date -d 'yesterday' '+%Y-%m-%d' 2>/dev/null)
            shift
            ;;
        -d|--date)
            if [ -z "$2" ]; then
                error_exit "Date argument required for --date flag"
            fi
            ENTRY_DATE="$2"
            shift 2
            ;;
        *)
            error_exit "Unknown option: $1\nUse --help for usage information"
            ;;
    esac
done

# Main logic
check_dependencies

FILENAME="$JOURNAL_DIR/$ENTRY_DATE.md"
EDITOR_CMD=$(get_editor)

mkdir -p "$JOURNAL_DIR"
cd "$JOURNAL_DIR" || error_exit "Cannot access journal directory: $JOURNAL_DIR"

# Initialize or check git repo
USE_GIT=true
init_repo || USE_GIT=false

# Pull latest changes if git is available
if [ "$USE_GIT" = true ] && git remote get-url origin &> /dev/null; then
    echo "Syncing with remote..."
    if ! git pull origin main --rebase 2>/dev/null; then
        warn_msg "Failed to pull from remote. Continuing with local changes..."
    fi
fi

# Create entry if it doesn't exist
if [ ! -f "$FILENAME" ]; then
    echo "# $ENTRY_DATE" > "$FILENAME"
    echo "" >> "$FILENAME"
    success_msg "Created new entry: $ENTRY_DATE.md"
else
    echo "Opening existing entry: $ENTRY_DATE.md"
fi

# Get file hash before editing (to detect changes)
BEFORE_HASH=$(md5sum "$FILENAME" 2>/dev/null || md5 -q "$FILENAME" 2>/dev/null)

# Open in editor
$EDITOR_CMD "$FILENAME"

# Only commit if git is enabled and file was modified
if [ "$USE_GIT" = true ]; then
    AFTER_HASH=$(md5sum "$FILENAME" 2>/dev/null || md5 -q "$FILENAME" 2>/dev/null)

    if [ "$BEFORE_HASH" != "$AFTER_HASH" ]; then
        echo ""
        echo -n "Commit changes? (y/n): "
        read -r commit_response

        if [[ "$commit_response" =~ ^[Yy]$ ]]; then
            git add "$FILENAME"
            git commit -m "Journal entry for $ENTRY_DATE"

            if git remote get-url origin &> /dev/null; then
                echo -n "Push to remote? (y/n): "
                read -r push_response

                if [[ "$push_response" =~ ^[Yy]$ ]]; then
                    if git push origin main; then
                        success_msg "✅ Changes committed and pushed!"
                    else
                        warn_msg "Failed to push. Run 'git push' manually when ready."
                    fi
                else
                    success_msg "✅ Changes committed locally"
                fi
            else
                success_msg "✅ Changes committed locally"
            fi
        fi
    else
        echo "No changes detected."
    fi
fi
